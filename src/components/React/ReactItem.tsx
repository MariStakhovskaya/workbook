import React from 'react';


function ReactItem() {
    return (
        <div className="React">
    <div>Что такое Route</div>
            <div>Router

                При старте проекта вам нужно определить какой тип роутера использовать.
                Для браузерных проектов есть BrowserRouter и HashRouter компоненты.
                BrowserRouter — следует использовать когда вы обрабатываете на сервере динамические запросы, а HashRouter используйте когда у вас статический веб сайт.

                Обычно предпочтительнее использовать BrowserRouter, но если ваш сайт расположен на статическом сервере(от перев. как github pages), то использовать HashRouter это хорошее решение проблемы.
                Наш проект предполагает использование бекенда поэтому мы будем использовать BrowserRouter.</div>

            <div>В React имеется своя система маршрутизация, которая позволяет сопоставлять запросы к приложению с определенными компонентами.
                Ключевым звеном в работе маршрутизации является модуль react-router, который содержит основной функционал по работе с маршрутизацией.
                Однако если мы собираемся работать в браузере, то нам надо использовать модуль react-router-dom</div>
            <div>Route  - это компонента, которая следит за урлом(URL). Если url совпадает, то она делает render
               {/* <Route path="/dialogs"
                       render={ () => <DialogsContainer   />} />*/}
            </div>
            <div>Доп материалы про Маршрутизацию:
            <p>https://habr.com/ru/post/329996/</p>
            </div>
            <div>Компонента - это чистая ф-ия, которая принимает пропсы и возращает JSX разметку</div>
            <div>import React from "react"; - Зачем это писать
            <p>JSX- это JS расширение. JSX браузером не понимается. В браузер попадает обычный js, и транспилятор Babel транспилирует jsx в js. И для этого нам понадобится импорт реакта</p>
            </div>
            <div>Reducer - это чистая ф-ия , которая принмает старый стейт, принимает action, если нужно , то старый стейт модефицирует по правилам иммьютабельности (неизменнности стейта т.е. модифицирует копию)
                (которые указаны в action) и возвращает измененную копию стейта, если модифицировали, если нет старый стейт</div>
            <div>
                ActionCreator - чистая ф-ия, которая возвращает action.
            </div>
            <div>DDD- Domain Driving Design - прогуглить, прочитать Эрик Эванс книгу </div>
            <div>Взаимодействие UI и BLL
            <p>Пользователь наживает кнопку, мы диспатчим какойто экшен в стейт. Редьюсер этот экшен обрабатывает, стейт меняется и соответственно идет перерисовка UI</p>
            </div>
            <div>Копирование глубокое и поверхностное
            <p>Если нам надо не просто скопировать массив, а какойто элемент поменять, то Мы можем делать копию массива через метод массива map
               {/* stateCopy = {
                    ...state,
                    users: state.users.map(u => u)}*/}
            </p>
                <p>Action это простой объект который как минимум должен содержать тип</p>
            </div>
            <div>SPRED оператор</div>
        </div>
    );
}

export default ReactItem;